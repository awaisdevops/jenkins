#!/usr/bin/env groovy

# Jenkins Declarative Pipeline Definition
pipeline {
    agent any  # Run on any available agent

    tools {
        maven 'Maven'  # Use the configured Maven installation
    }

    stages {

        # Stage: Increment Version
        stage('increment version') {
            steps {
                script {
                    echo 'incrementing app version...'
                    
                    # Update project version using Maven Build Helper and Versions plugin
                    sh 'mvn build-helper:parse-version versions:set \
                        -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.nextIncrementalVersion} \
                        versions:commit'
                    
                    # Extract version from pom.xml
                    def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
                    def version = matcher[0][1]
                    
                    # Set version for Docker image
                    env.IMAGE_NAME = "$version-$BUILD_NUMBER"
                }
            }
        }

        # Stage: Build Application
        stage('build app') {
            steps {
                script {
                    echo "building the application..."
                    
                    # Build the Maven project
                    sh 'mvn clean package'
                }
            }
        }

        # Stage: Build Docker Image
        stage('build image') {
            steps {
                script {
                    echo "building the docker image..."
                    
                    # Login and push Docker image using credentials
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-repo', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                        sh "docker build -t dockerhub-url/demo-app:${IMAGE_NAME} ."
                        sh "echo $PASS | docker login -u $USER --password-stdin"
                        sh "docker push dockerhub-url/demo-app:${IMAGE_NAME}"
                    }
                }
            }
        }

        # Stage: Deploy to EC2
        stage('deploy') {
            steps {
                script {
                    echo 'deploying docker image to EC2...'
                    # Add deployment logic here
                }
            }
        }

        # Stage: Commit Version Update to Git
        stage('commit version update') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'gitlab-credentials', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                        
                        # Git configuration (only needed once per agent)
                        sh 'git config --global user.email "jenkins@example.com"'
                        sh 'git config --global user.name "jenkins"'
                        
                        # Push version bump to remote Git repository
                        sh "git remote set-url origin https://${USER}:${PASS}@gitlab.com/nanuchi/java-maven-app.git"
                        sh 'git add .'
                        sh 'git commit -m "ci: version bump"'
                        sh 'git push origin HEAD:jenkins-jobs'
                    }
                }
            }
        }
    }
}
